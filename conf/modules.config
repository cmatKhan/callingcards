/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: MULTIQC {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

    }

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    /////////////////////// PROCESS GENOME ////////////////////////////////////

    // This applies to all PREPARE_GENOME steps
    withName: ".*:PREPARE_GENOME:.*" {
        publishDir = [
            enabled: params.save_genome_intermediate,
            path: { "${params.outdir}/genome/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    // bwamem2_index can take a lot of memory for larger genomes. This gives
    // the pipeline the chance to scale up to 120G for this. The enormous
    // amount of memory should be fixed in versions of bwamem2 after ~2022 01
    withName: BWAMEM2_INDEX {
        maxRetries = 5
        memory = { check_max( 24.GB * task.attempt, 'memory' ) }
    }

    //////////////////////////// PROCESS_READS /////////////////////////////////

    // default publishDir for preprae_reads steps
    def PREPARED_READS_DEFAULT_PUBLISHDIR = [
            path: { "${params.outdir}/${meta.id}/sequence/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    if (params.datatype == 'mammal'){

        withName: FASTQC {
            publishDir = PREPARED_READS_DEFAULT_PUBLISHDIR
            ext.args = '--quiet'
        }

        // add barcode patterns to reads
        withName: UMITOOLS_EXTRACT {
            publishDir = PREPARED_READS_DEFAULT_PUBLISHDIR +
                ['enabled': (params.save_sequence_intermediate)]
            // if the r2 pattern is empty, only add the r1 barcode
            ext.prefix = { "${meta.id}_${meta.split}_barcoded" }
            ext.args = [
                "--bc-pattern=${params.r1_bc_pattern}",
                params.r2_bc_pattern ? "--bc-pattern2=${params.r2_bc_pattern}" : ""
            ].join(' ').trim()
        }


        // trim ends based on user input
        withName: TRIMMOMATIC {
            publishDir = PREPARED_READS_DEFAULT_PUBLISHDIR +
                ['enabled': (params.save_sequence_intermediate)]
            // if the r2 pattern is empty, only add the r1 barcode
            ext.prefix = { "${meta.id}_${meta.split}_barcoded_cropped" }
            ext.args = [
                "CROP:${params.r1_crop}"
            ].join(' ').trim()
        }
    }

    if (params.datatype == 'yeast'){

        withName: FASTQCRAW {
            publishDir = PREPARED_READS_DEFAULT_PUBLISHDIR
            ext.prefix = {"${meta.id}_raw"}
            ext.args = '--quiet'
        }

        withName: FASTQCDEMUX {
            publishDir = PREPARED_READS_DEFAULT_PUBLISHDIR
            ext.prefix = {
                "${meta.id}_${meta.tf}"
            }
            ext.args = '--quiet'
        }

        withName: DEMULTIPLEX {
            publishDir = PREPARED_READS_DEFAULT_PUBLISHDIR +
                            ['enabled': (params.save_sequence_intermediate)]
            ext.args = {[
                "--split_key tf",
                "--split_suffix ${meta.id}_${meta.split}",
                "-p"
            ].join(' ').trim()}
        }

        withName: CONCATFASTQ {
            publishDir = PREPARED_READS_DEFAULT_PUBLISHDIR +
                            ['enabled': (params.save_sequence_intermediate)]
            ext.prefix = {
                "${meta.id}_${meta.tf}"
            }
            ext.suffix = {[
                "${meta.read_end}_"
            ].join(' ').trim()}
        }

        withName: CONCATQC {
            publishDir = [
                path: { "${params.outdir}/${meta.id}/sequence" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
            ext.prefix = {
                "${meta.id}_${meta.tf}"
            }
        }

        withName: TRIMMOMATIC {
            publishDir = PREPARED_READS_DEFAULT_PUBLISHDIR +
                            ['enabled': (params.save_sequence_intermediate)]
            ext.prefix = { "${meta.id}_${meta.tf}_cropped" }
            ext.args = [
                "CROP:${params.r1_crop}"
            ].join(' ').trim()
        }
    }

    ////////////////////////////// ALIGN ///////////////////////////////////////

    def ALIGN_DEFAULT_PUBLISHDIR = [
        path: { "${params.outdir}/${meta.id}/alignment/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    if (params.datatype == 'mammal'){
        withName: ".*:ALIGN:.*" {
            publishDir = ALIGN_DEFAULT_PUBLISHDIR +
                ['enabled': params.save_alignment_intermediate]

            ext.prefix = {
                "${meta.id}_${meta.split}"
            }

        }
        // add barcode patterns to
        withName: SAMTOOLS_SORT {
            // if the r2 pattern is empty, only add the r1 barcode
            ext.prefix = { "${meta.id}_${meta.split}_sorted" }
        }
    }

    if (params.datatype == 'yeast') {

        // set default publishDir for all ALIGN steps.
        // NOTE: all steps are optionally output by
        // params.save_alignment_intermediate
        withName: ".*:ALIGN:.*" {
            publishDir = ALIGN_DEFAULT_PUBLISHDIR +
                ['enabled': params.save_alignment_intermediate]

            ext.prefix = {
                "${meta.id}_${meta.tf}"
            }
        }

        // add barcode patterns to
        withName: SAMTOOLS_SORT {
            // if the r2 pattern is empty, only add the r1 barcode
            ext.prefix = {
                "${meta.id}_${meta.tf}_sorted"
            }
        }

    }


    //////////////////////// PROCESS ALIGNMENTS ////////////////////////////////

    // control output to results of process alignment
    def PROCESS_ALIGNMENTS_DEFAULT_PUBLISHDIR = [
            path: { "${params.outdir}/${meta.id}/hops/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

    if (params.datatype == 'mammal'){

        withName: COUNT_HOPS {
            publishDir = PROCESS_ALIGNMENTS_DEFAULT_PUBLISHDIR +
                ['enabled': params.save_alignment_intermediate]
            maxRetries = 3
            memory = { check_max( 24.GB * task.attempt, 'memory' ) }
            ext.suffix = { "${meta.split}" }
            ext.args = [
                "-p",
            ].join(' ').trim()
        }

        withName: CONCATQC {
            publishDir = [
                path: { "${params.outdir}/${meta.id}/hops" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
            ext.suffix = { "${meta.qc_status}" }
        }

        withName: SAMTOOLS_MERGE {
            publishDir = PROCESS_ALIGNMENTS_DEFAULT_PUBLISHDIR +
                ['enabled': params.save_alignment_intermediate]
            ext.prefix = {
                "${meta.id}_${meta.qc_status}_merged"
            }
        }

        withName: ".*:PROCESS_ALIGNMENTS:SAMTOOLS_SORT" {
            publishDir = [
                path: { "${params.outdir}/${meta.id}/hops" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
            ext.prefix = {
                "${meta.id}_${meta.qc_status}_merged_sorted"
            }
        }

        withName: ".*:PROCESS_ALIGNMENTS:SAMTOOLS_INDEX" {
            publishDir = [
                path: { "${params.outdir}/${meta.id}/hops" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: SAMTOOLS_STATS {
            publishDir = PROCESS_ALIGNMENTS_DEFAULT_PUBLISHDIR
            ext.prefix = {
                "${meta.id}_${meta.qc_status}_merged_sorted"
            }
        }

        withName: SAMTOOLS_FLAGSTAT {
            publishDir = PROCESS_ALIGNMENTS_DEFAULT_PUBLISHDIR
            ext.prefix = {
                "${meta.id}_${meta.qc_status}_merged_sorted"
            }
        }

        withName: SAMTOOLS_IDXSTATS {
            publishDir = PROCESS_ALIGNMENTS_DEFAULT_PUBLISHDIR
            ext.prefix = {
                "${meta.id}_${meta.qc_status}_merged_sorted"
            }
        }

        // ignore errors -- an error will occur if a bam file is empty
        // since this may occur when there are no passing or failing hops,
        // the errorStrategy should be set to ignore
        withName: PICARD_COLLECTMULTIPLEMETRICS {
            publishDir = PROCESS_ALIGNMENTS_DEFAULT_PUBLISHDIR
            ext.prefix = {
                "${meta.id}_${meta.qc_status}_merged_sorted"
            }
            errorStrategy = 'ignore'
        }

        // ignore errors -- an error will occur if a bam file is empty
        // since this may occur when there are no passing or failing hops,
        // the errorStrategy should be set to ignore
        withName: ".*:RSEQC.*" {
            publishDir = PROCESS_ALIGNMENTS_DEFAULT_PUBLISHDIR
            ext.prefix = {
                "${meta.id}_${meta.qc_status}_merged_sorted"
            }
            errorStrategy = 'ignore'
        }

    }

    if (params.datatype == 'yeast'){

        withName: COUNT_HOPS {
            publishDir = [
                path: { "${params.outdir}/${meta.id}/hops" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
            maxRetries = 3
            memory = { check_max( 20.GB * task.attempt, 'memory'  ) }
        }

        withName: SAMTOOLS_STATS {
            publishDir = PROCESS_ALIGNMENTS_DEFAULT_PUBLISHDIR
            ext.prefix = {
                "${meta.id}_${meta.tf}_${meta.qc_status}_tagged"
            }
        }

        withName: SAMTOOLS_FLAGSTAT {
            publishDir = PROCESS_ALIGNMENTS_DEFAULT_PUBLISHDIR
            ext.prefix = {
                "${meta.id}_${meta.tf}_${meta.qc_status}_tagged"
            }
        }

        withName: SAMTOOLS_IDXSTATS {
            publishDir = PROCESS_ALIGNMENTS_DEFAULT_PUBLISHDIR
            ext.prefix = {
                "${meta.id}_${meta.tf}_${meta.qc_status}_tagged"
            }
        }

        // ignore errors -- an error will occur if a bam file is empty
        // since this may occur when there are no passing or failing hops,
        // the errorStrategy should be set to ignore
        withName: PICARD_COLLECTMULTIPLEMETRICS {
            publishDir = PROCESS_ALIGNMENTS_DEFAULT_PUBLISHDIR
            ext.prefix = {
                "${meta.id}_${meta.tf}_${meta.qc_status}_tagged"
            }
            errorStrategy = 'ignore'
        }

        // ignore errors -- an error will occur if a bam file is empty
        // since this may occur when there are no passing or failing hops,
        // the errorStrategy should be set to ignore
        withName: ".*:RSEQC.*" {
            publishDir = PROCESS_ALIGNMENTS_DEFAULT_PUBLISHDIR
            ext.prefix = {
                "${meta.id}_${meta.tf}_${meta.qc_status}_tagged"
            }
            errorStrategy = 'ignore'
        }

    }
}
